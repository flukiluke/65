'Copyright 2020 Luke Ceddia
'SPDX-License-Identifier: Apache-2.0
'dump.bm - Produce human readable representation of parsed program

sub dump_program
    print #1, "Table of identifiers:"
    symtab_dump
    print #1,
    'print #1, "Function type signatures:"
    'type_dump_functions
    'print #1,
    print #1, "Table of constants:"
    ast_dump_constants
    print #1,
    print #1, "Program:"
    ast_dump_pretty AST_ENTRYPOINT, 0
    'Search the symtab for subprocedures
    for i = 1 to symtab_last_entry
        if symtab(i).typ = SYM_FUNCTION and symtab(i).v2 = SYM_FUNCTION_USER then dump_procedure i
    next i
end sub

sub type_dump_functions
    for i = 1 to symtab_last_entry
        typ = symtab(i).typ
        if typ = SYM_FUNCTION or typ = SYM_INFIX or typ = SYM_PREFIX then
            sig_index = symtab(i).v1
            do
                print #1, sig_index; " "; symtab(i).identifier; " "; type_human_sig$(type_signatures(sig_index).sig)
                sig_index = type_signatures(sig_index).succ
            loop while sig_index <> 0
        end if
    next i
end sub

sub symtab_dump
    print #1, " ID          Name     Typ     v1     v2     v3     v4"
    for i = 1 to symtab_last_entry
        print #1, using "###    \            \ ###    ###    ###    ###    ###"; i; symtab(i).identifier; _
                        symtab(i).typ,symtab(i).v1; symtab(i).v2; symtab(i).v3; symtab(i).v4
    next i
end sub

sub dump_procedure(sym)
    return_type = type_sig_return(symtab(sym).v1)
    if return_type = TYPE_NONE then is_sub = TRUE
    print #1,
    if is_sub then
        print #1, "SUB "; symtab(sym).identifier; " (";
    else
        print #1, "FUNCTION "; symtab(sym).identifier; " AS "; type_human_readable$(return_type); " (";
    end if
    root = symtab(sym).v3
    for i = 2 to ast_num_children(root) - 1
        ast_dump_pretty ast_get_child(root, i), 0
        if i < ast_num_children(root) - 1 then print #1, ", ";
    next i
    print #1, ")"
    ast_dump_pretty ast_get_child(root, 1), 1
    if is_sub then print #1, "END SUB" else print #1, "END FUNCTION"
end sub

sub ast_dump_pretty(root, indent_level)
    indent$ = space$(indent_level * 4)
    if ast_nodes(root).typ = 0 then
        Error_message$ = "Node" + str$(root) + " is invalid": error 101
    end if
    select case ast_nodes(root).typ
    case AST_PROCEDURE
        print "Invalid nested procedure"
    case AST_ASSIGN
        ast_dump_pretty ast_get_child(root, 1), 0
        print #1, " = ";
        ast_dump_pretty ast_get_child(root, 2), 0
    case AST_IF
        for clause = 1 to ast_num_children(root) \ 2
            if clause = 1 then print #1, indent$; "IF "; else print #1, indent$; "ELSEIF ";
            ast_dump_pretty ast_get_child(root, clause * 2 - 1), 0
            print #1, " THEN "
            ast_dump_pretty ast_get_child(root, clause * 2), indent_level
        next clause
        if ast_num_children(root) mod 2 then
            print #1, indent$; "ELSE"
            ast_dump_pretty ast_get_child(root, ast_num_children(root)), indent_level
        end if
        print #1, indent$; "END IF";
    case AST_WHILE
        print #1, indent$; "WHILE ";
        ast_dump_pretty ast_get_child(root, 1), 0
        print #1,
        ast_dump_pretty ast_get_child(root, 2), indent_level
        print #1, indent$; "WEND";
    case AST_DO_PRE
        print #1, indent$; "DO WHILE ";
        ast_dump_pretty ast_get_child(root, 1), 0
        print #1,
        ast_dump_pretty ast_get_child(root, 2), indent_level
        print #1, indent$; "LOOP";
    case AST_DO_POST
        print #1, indent$; "DO"
        ast_dump_pretty ast_get_child(root, 2), indent_level
        print #1, indent$; "LOOP WHILE ";
        ast_dump_pretty ast_get_child(root, 1), 0
    case AST_FOR
        print #1, indent$; "FOR ";
        ast_dump_pretty ast_get_child(root, 1), 0
        print #1, " = ";
        ast_dump_pretty ast_get_child(root, 2), 0
        print #1, " TO ";
        ast_dump_pretty ast_get_child(root, 3), 0
        print #1, " STEP ";
        ast_dump_pretty ast_get_child(root, 4), 0
        print #1,
        ast_dump_pretty ast_get_child(root, 5), indent_level
        print #1, indent$; "NEXT ";
        ast_dump_pretty ast_get_child(root, 1), 0
    case AST_SELECT
        print #1, indent$; "SELECT CASE ";
        ast_dump_pretty ast_get_child(root, 1), 0
        print #1,
        for i = 2 to ast_num_children(root) step 2
            print #1, indent$; "CASE ";
            ast_dump_pretty ast_get_child(root, i), 0
            print #1,
            ast_dump_pretty ast_get_child(root, i + 1), indent_level + 1
        next i
        print #1, indent$; "END SELECT";
    case AST_CALL
        print #1, "call(";
        print #1, symtab(ast_nodes(root).ref).identifier;
        print #1, " ["; type_human_sig$(type_signatures(ast_nodes(root).ref2).sig); "]";
        if len(ast_children(root)) then print #1, ", ";
        for i = 1 to ast_num_children(root)
            ast_dump_pretty ast_get_child(root, i), 0
            if i <> ast_num_children(root) then print #1, ", ";
        next i
        print #1, ")";
    case AST_CONSTANT
        if type_of_constant(root) = TYPE_STRING then
            print #1, chr$(34); ast_constants(ast_nodes(root).ref); chr$(34);
        else
            print #1, ast_constants(ast_nodes(root).ref);
        end if
    case AST_BLOCK
        for i = 1 to ast_num_children(root)
            print #1, indent$;
            ast_dump_pretty ast_get_child(root, i), indent_level + 1
            print #1,
        next i
    case AST_VAR
        print #1, "var(";
        var = ast_nodes(root).ref
        if symtab(var).v3 then print #1, "CONST ";
        print #1, symtab(var).identifier; ")";
    case AST_UDT_ACCESS
        print #1, "udt(";
        ast_dump_pretty ast_get_child(root, 1), 0
        print #1, ", "; symtab(ast_nodes(root).ref).identifier; ")";
    case AST_ARRAY_ACCESS
        ast_dump_pretty ast_get_child(root, 1), 0
        print #1, "(";
        for i = 2 to ast_num_children(root)
            ast_dump_pretty ast_get_child(root, i), 0
            if i <> ast_num_children(root) then print #1, ", "
        next i
        print #1, ")";
    case AST_ARRAY_RESIZE
        print #1, "REDIM ";
        ast_dump_pretty ast_get_child(root, 1), 0
        print #1, "(";
        for i = 2 to ast_num_children(root) step 2
            ast_dump_pretty ast_get_child(root, i), 0
            print #1, " TO ";
            ast_dump_pretty ast_get_child(root, i + 1), 0
            if i < ast_num_children(root) - 1 then print #1, ", ";
        next i
        print #1, ")";
    case AST_CAST
        print #1, "cast("; type_human_readable$(type_of_cast(root)); ", ";
        ast_dump_pretty ast_get_child(root, 1), 0
        print #1, ")";
    case AST_FLAGS
        print #1, "flag("; ltrim$(str$(ast_nodes(root).ref)); ")";
    case AST_GOTO
        print #1, indent$; "goto("; ast_nodes(root).ref; ")";
    case AST_NONE
        print #1, "[NONE]";
    case else
        print "Unknown AST type"; ast_nodes(root).typ
    end select
end sub

sub ast_dump_constants
    print #1, " ID    Type      Value"
    for i = 1 to ast_last_constant
        print #1, using "###    &    &"; i; type_human_readable(ast_constant_types(i)); ast_constants(i)
    next i
end sub
